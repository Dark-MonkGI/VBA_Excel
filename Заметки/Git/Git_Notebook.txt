git clone <ссылка> - склонировать
git add .  <файл или папка> - добавить в индексацию файлв
git commit -m "<название коммита>" - закоммитить изменения локально
git push origin <название ветки> - запушить изменения
git pull origin <название ветки> - обновить локальнкю ветку(обязательно надо в ней находиться или потом не разберешься)
git checkout <название ветки> - переключиться на ветку
git checkout -b <название новой ветки> - создать ветку и переключиться на нее
-----------------------------------------------------------------------------------------
Настройки:
https://www.youtube.com/watch?v=fcLzU53dqqI
SSH: ssh-keygen
git --version

git config --global user.name Dark-MonkGI
git config --global user.email gryaznov774@gmail.com
git config --global color.ui auto
git config --list

Установить глобально основной main:
git config --global init.defaultBranch main
----------------------------
Справка по переименованию GIT веток master в main:
git branch -m master main
git push -u origin main
# Теперь в настройках репозитория ставим по умолчанию новую ветку "main"
git push origin --delete master

https://onedev.net/post/1008

https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-branches-in-your-repository/renaming-a-branch
---------------------------------------------------------------------------------------------------------------------------------------------------------------
Подключение удаленного репо: 

git remote add origin git@github.com:Dark-MonkGI/Learning_C_Sharp.git     - подключаемся, 
git clone git@github.com:Dark-MonkGI/Learning_C_Sharp.git <имя папки которую надо создать локально>    - копируем гит

git remote -v -смотрим подключения
git fetch     -подгрузить обновления из реаозитория включая новые ветки про которые мы незнаем

git checkout main -переключаемся на ветку, которой еще нет локально. после этого ее станет видно.

git branch -a смотрим на все ветки 
git branch -m main - переименовали ветку в майн




------------------------------------------------------------------------------------
git status
git add . - добавить НОВЫЕ и все файлы в "отслеживаемые"
git commit -m 'текст коммита'  - добавит новый коммит сразу с текстом
git commit -am 'текст коммита'  - добавит новый коммит сразу с текстом и изменнеия в файлах запишет

git commit --amend  -дозапинет в последний коммит а не создаст новый, далее пушить надо так:
git push --forse -принудительная перезапись после перезаписи комита.


git push --set-upstream origin <name brange> -сздает новую ветку на удаленном сервере и туда пушит нашу ветку
git push -u origin <name brange> - аналогично тому что выше, создает ветку и в нее пушит

git pull       - загрузить изменнения из сервака на локальную машину из той ветки где мы находмся
git pull --all - В обновить локальные ветки, которые отслеживают удаленные ветки;
git fetch      - подгрузить обновления из реаозитория включая новые ветки про которые мы незнаем
------------------------------------------------------------------------------------
Востановление истории: 
git log
git log --oneline - история в полном и кратком видел всех комитов
git reflog        -история комитов и удалений коммиитов

git reset <хеш лога> - востановить коммит нужный (просто убирает лишние сохранения в истории файлы остаюься как были)
git revert <хеш лога> - отменяет дейсвия этого коммита( убирает последствия тоесть..востановил удаленный файл)
git restore <название файла>  - сброс состояния файла на состояние последнено коммита 
------------------------------------------------------------------------------------
Ветки: ветки по умолчанию обычно создаються от мастер ветки.

git branch - проверить наличие веток 
git branch <name branch> - создать новую ветку 
git branch <name branch> <name start branch>- создать новую ветку из определенной ветки если их несколько
git checkout <name branch> - сменить ветку, переключиться на другую 
git checkout -b <name branch> - создать новую ветку и сразу на нее переключиться
------------------------------------------------------------------------------------
Слияния: 
git merge <name brange two> - слить с веткой, в которой находимся вторую ветку.
git branch -d <name branch> -удалить ветку (локально) после этого:
git push --delete origin <name branch> -удалить ветку в самом гите

Сместить начало ветки: 
находясь во второй ветке
git rebase master - смещаем текущую ветку на последний коммит ветки "мастер"
так как ветка изменилась, чтоб запушить принудительно:
git push --forse -принудительная перезапись после перезаписи ветки
-----------------------------------------------------------------------------
Теги: 
Проставить теги версионности.
git tag 1.0.0 - присвоили тег версии для данного коммита, данной ветки.
git push --tags - после присвоения тега
git tag  - прочитали тег версии для данного коммита, данной ветки.
git tag --list - прочитали весь список тегов данной ветки.

git tag -d 1.0.0 - удалить тег версии для данного коммита, данной ветки.
git push --delete origin 1.0.0 - удалить тег c основоного репозитория версии для данного коммита, данной ветки.










